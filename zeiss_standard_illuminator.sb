{
    "nodes": [
        {
            "datums": [
                {
                    "expr": "self.zmax-4",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "18/2",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "27/2",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+qXqYf13.5a-f-4Z-Zf0nam__f1-r+qXqYf9a-f-4Z-Zf0',float('-13.500000'),float('-13.500000'),float('-4.000000'),float('13.500000'),float('13.500000'),float('0.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                187.14955198736868,
                909.4413507263097
            ],
            "name": "body",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 1
        },
        {
            "datums": [
                {
                    "expr": "body.x+body.R-self.r-.5",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.zmin-1",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.zmax+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "1.5",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1',float('10.000000'),float('-1.500000'),float('-5.000000'),float('13.000000'),float('1.500000'),float('1.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -904.4912414312637,
                3068.7910013586556
            ],
            "name": "screwhole",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 2
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__2.__5,__6.__5]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "body.x",
                    "name": "x",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "3",
                    "name": "n",
                    "type": "int",
                    "uid": 3
                },
                {
                    "expr": "\u0012fab.types.Shape('iim-Xf0-Yf0-Zf0m+*f1X*f0Y+*f-0X*f1Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f0.866025Y+*f-0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f-0.866025Y+*f0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3',float('-9.165062'),float('-13.374350'),float('-5.000000'),float('14.000000'),float('13.374350'),float('1.000000'))",
                    "name": "array",
                    "type": "_fabtypes.Shape",
                    "uid": 4
                }
            ],
            "inspector": [
                -223.88281845681308,
                3329.4764493044236
            ],
            "name": "a0",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Array (polar)')",
                "",
                "input('shape', fab.types.Shape)",
                "input('x', float)",
                "input('y', float)",
                "input('n', int)",
                "",
                "output('array', fab.shapes.iterate_polar(shape, x, y, n))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * 0.3 + x,",
                "     math.sin(i/36. * 2*math.pi) * 0.3 + y, 0)",
                "    for i in range(36)], close=True, color=sb.color.teal)",
                "",
                "sb.ui.point(x, y, 0, color=sb.color.teal)",
                ""
            ],
            "uid": 3
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__2.__0]",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__2.__1]",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "\u0011[__2.__2]",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.zmin+1",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "2.5",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3',float('9.000000'),float('-2.500000'),float('-5.000000'),float('14.000000'),float('2.500000'),float('-3.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -565.1302460592747,
                3447.3722584580532
            ],
            "name": "c1",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 6
        },
        {
            "datums": [
                {
                    "expr": "body.x-2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "body.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.zmin+3",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "3.15",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "9",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "10",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "1",
                    "name": "r",
                    "type": "float",
                    "uid": 6
                },
                {
                    "expr": "\u0012fab.types.Shape('iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-2X-Xf-2a-f-2.925Y-Yf2.925a-f-6Z-Zf4am__f1iaa-f-3.575X-Xf-0.425a-f-2.925Y-Yf2.925aa-f-2X-Xf-2a-f-4.5Y-Yf4.5a-f-4.425Z-Zf2.425-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925',float('-3.575000'),float('-4.500000'),float('-6.000000'),float('-0.425000'),float('4.500000'),float('4.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 7
                }
            ],
            "inspector": [
                -919.1623503517359,
                2028.393585728882
            ],
            "name": "usb_c",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "",
                "import fab",
                "",
                "title('Rounded cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "input('r', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "# This is the circle's radius in actual units (not a 0-1 fraction)",
                "r_ = r * min([width, height, depth])/2",
                "",
                "output('shape', fab.shapes.rounded_cube(xmin, xmax, ymin, ymax, zmin, zmax, r))",
                "",
                "def drag_hwd(this, dx, dy, dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "# UI",
                "def drag_r(this, x, y, z):",
                "    if abs(this.width) < abs(this.height):",
                "        d = abs(this.width)",
                "        mid = this.ymax + this.height/2 - d / 2",
                "    else:",
                "        d = abs(this.height)",
                "        mid = this.y",
                "    r = 1 - (y - mid) / (d/2)",
                "    this.r = float(min(1, max(0, r)))",
                "",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2, y + height/2, z + depth/2, drag=drag_hwd)",
                "sb.ui.point(xmax, ymax - r_, zmax, drag=drag_r, relative=False)",
                ""
            ],
            "uid": 7
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.zmin",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+3",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.r",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXqYf9a-f-4Z-Zf-1',float('-9.000000'),float('-9.000000'),float('-4.000000'),float('9.000000'),float('9.000000'),float('-1.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                184.26030763477982,
                1350.0624820160294
            ],
            "name": "cap",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 8
        },
        {
            "datums": [
                {
                    "expr": "usb_c.x-self.width/2-usb_c.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "usb_c.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "usb_c.z+self.depth/2-2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "1.7",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "11",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "16.4",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-5.275X-Xf-3.575a-f-5.5Y-Yf5.5a-f-3Z-Zf13.4',float('-5.275000'),float('-5.500000'),float('-3.000000'),float('-3.575000'),float('5.500000'),float('13.400000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -1300.3090340492004,
                2162.117920986211
            ],
            "name": "board",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 5
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "cap.zmin",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+14",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.r",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXqYf9a-f-4Z-Zf10',float('-9.000000'),float('-9.000000'),float('-4.000000'),float('9.000000'),float('9.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                -193.0205453862834,
                1456.2752407561366
            ],
            "name": "filler",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 11
        },
        {
            "datums": [
                {
                    "expr": "body.x-body.r-2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.R",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.R*2",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "40",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-17.75X-Xf-4.25a-f-13.5Y-Yf13.5a-f-20Z-Zf20',float('-17.750000'),float('-13.500000'),float('-20.000000'),float('-4.250000'),float('13.500000'),float('20.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                -196.19126854946103,
                1831.2547646953535
            ],
            "name": "c0",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 12
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__11.__5]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__12.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+qXqYf9a-f-4Z-Zf10am__f1aa-f-17.75X-Xf-4.25a-f-13.5Y-Yf13.5a-f-20Z-Zf20',float('-9.000000'),float('-9.000000'),float('-4.000000'),float('-4.250000'),float('9.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                175.13422022827348,
                1757.4370470467675
            ],
            "name": "i0",
            "script": [
                "import fab.types",
                "",
                "title('Intersection')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & b)",
                ""
            ],
            "uid": 13
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__8.__5,__1.__6,__13.__2]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__5.__6,__7.__7,__3.__4]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiam__f1-r+qXqYf9a-f-4Z-Zf-1aam__f1-r+qXqYf13.5a-f-4Z-Zf0nam__f1-r+qXqYf9a-f-4Z-Zf0aam__f1-r+qXqYf9a-f-4Z-Zf10am__f1aa-f-17.75X-Xf-4.25a-f-13.5Y-Yf13.5a-f-20Z-Zf20niiam__f1aa-f-5.275X-Xf-3.575a-f-5.5Y-Yf5.5a-f-3Z-Zf13.4iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-2X-Xf-2a-f-2.925Y-Yf2.925a-f-6Z-Zf4am__f1iaa-f-3.575X-Xf-0.425a-f-2.925Y-Yf2.925aa-f-2X-Xf-2a-f-4.5Y-Yf4.5a-f-4.425Z-Zf2.425-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925iim-Xf0-Yf0-Zf0m+*f1X*f0Y+*f-0X*f1Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f0.866025Y+*f-0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f-0.866025Y+*f0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3',float('-13.500000'),float('-13.500000'),float('-4.000000'),float('13.500000'),float('13.500000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                693.1099514776537,
                2200.826590501665
            ],
            "name": "d1",
            "script": [
                "import fab.types",
                "",
                "title('Difference')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & ~b)",
                ""
            ],
            "uid": 14
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__9.__2]",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiaiiam__f1-r+qXqYf9a-f-4Z-Zf-1aam__f1-r+qXqYf13.5a-f-4Z-Zf0nam__f1-r+qXqYf9a-f-4Z-Zf0aam__f1-r+qXqYf9a-f-4Z-Zf10am__f1aa-f-17.75X-Xf-4.25a-f-13.5Y-Yf13.5a-f-20Z-Zf20niiam__f1aa-f-5.275X-Xf-3.575a-f-5.5Y-Yf5.5a-f-3Z-Zf13.4iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-2X-Xf-2a-f-2.925Y-Yf2.925a-f-6Z-Zf4am__f1iaa-f-3.575X-Xf-0.425a-f-2.925Y-Yf2.925aa-f-2X-Xf-2a-f-4.5Y-Yf4.5a-f-4.425Z-Zf2.425-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925iim-Xf0-Yf0-Zf0m+*f1X*f0Y+*f-0X*f1Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f0.866025Y+*f-0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f-0.866025Y+*f0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3am__f1aa-f-15.5X-Xf-5.5a-f-6Y-Yf6a-f0Z-Zf8.7aam__f1-r+qXqYf10a-f0Z-Zf10nam__f1-r+qXqYf9a-f0Z-Zf10im__-*f2f0Zm+f0/*-Xf0f13+*f0-Zf0*f1-f13Z+f0/*-Yf0f13+*f0-Zf0*f1-f13Z_am__f1-r+qXqYf17.5a-f0Z-Zf13am__f1-r+qXqYf13.5a-f0Z-Zf20',float('-15.500000'),float('-13.500000'),float('-4.000000'),float('13.500000'),float('13.500000'),float('10.000000'))",
                    "name": "out",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                }
            ],
            "inspector": [
                1545.56176834851,
                2525.869178560087
            ],
            "name": "m0",
            "script": [
                "import fab",
                "",
                "title('Mesh (.stl)')",
                "",
                "input('shape', fab.types.Shape)",
                "output('out', shape)",
                "",
                "sb.export.stl(shape)",
                ""
            ],
            "uid": 16
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.zmax",
                    "name": "z0",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "body.zmin-9",
                    "name": "z1",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.R+4",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('m__-*f2f0Zm+f0/*-Xf0f13+*f0-Zf0*f1-f13Z+f0/*-Yf0f13+*f0-Zf0*f1-f13Z_am__f1-r+qXqYf17.5a-f0Z-Zf13',float('-17.500000'),float('-17.500000'),float('-13.000000'),float('17.500000'),float('17.500000'),float('0.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                689.3682250551276,
                2674.5626939979297
            ],
            "name": "bevel",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cone (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z0', float)",
                "input('z1', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cone(x, y, z0, z1, r))",
                "",
                "# UI",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, z0)",
                "    for i in range(36)], close=True)",
                "sb.ui.wireframe([(x,y,z0), (x+r,y,z0)])",
                "sb.ui.wireframe([(x,y,z0), (x,y,z1)])",
                "",
                "sb.ui.point(x, y, z0)",
                "sb.ui.point(x, y, z1)",
                "sb.ui.point(x + r, y, z0, drag=(r, None, None))",
                ""
            ],
            "uid": 4
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__14.__2,__15.__6,__10.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__4.__5,__0.__5]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiiaiiam__f1-r+qXqYf9a-f-4Z-Zf-1aam__f1-r+qXqYf13.5a-f-4Z-Zf0nam__f1-r+qXqYf9a-f-4Z-Zf0aam__f1-r+qXqYf9a-f-4Z-Zf10am__f1aa-f-17.75X-Xf-4.25a-f-13.5Y-Yf13.5a-f-20Z-Zf20niiam__f1aa-f-5.275X-Xf-3.575a-f-5.5Y-Yf5.5a-f-3Z-Zf13.4iiiiiiiiiiiiiiiiiiiiiam__f1aa-f-2X-Xf-2a-f-2.925Y-Yf2.925a-f-6Z-Zf4am__f1iaa-f-3.575X-Xf-0.425a-f-2.925Y-Yf2.925aa-f-2X-Xf-2a-f-4.5Y-Yf4.5a-f-4.425Z-Zf2.425-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf2.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575-r++q-Xf-2q-Yf-2.925q-Zf-4.425f1.575am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf2.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf2.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925am__f1-r+q-Xf-2q-Yf-2.925f1.575a-f-4.425Z-Zf2.425a-r+q-Yf-2.925q-Zf-4.425f1.575a-f-2X-Xf-2a-r+q-Xf-2q-Zf-4.425f1.575a-f-2.925Y-Yf2.925iim-Xf0-Yf0-Zf0m+*f1X*f0Y+*f-0X*f1Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f0.866025Y+*f-0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3m-Xf0-Yf0-Zf0m+*f-0.5X*f-0.866025Y+*f0.866025X*f-0.5Y_m-Xf-0-Yf-0-Zf0iam__f1-r+q-Xf11.5qYf1.5a-f-5Z-Zf1am__f1-r+q-Xf11.5qYf2.5a-f-5Z-Zf-3am__f1aa-f-15.5X-Xf-5.5a-f-6Y-Yf6a-f0Z-Zf8.7aam__f1-r+qXqYf10a-f0Z-Zf10nam__f1-r+qXqYf9a-f0Z-Zf10im__-*f2f0Zm+f0/*-Xf0f13+*f0-Zf0*f1-f13Z+f0/*-Yf0f13+*f0-Zf0*f1-f13Z_am__f1-r+qXqYf17.5a-f0Z-Zf13am__f1-r+qXqYf13.5a-f0Z-Zf20',float('-15.500000'),float('-13.500000'),float('-4.000000'),float('13.500000'),float('13.500000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                1168.8539192355645,
                2529.345515927193
            ],
            "name": "i1",
            "script": [
                "import fab.types",
                "",
                "title('Intersection')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & b)",
                ""
            ],
            "uid": 9
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "bevel.z0",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "self.zmin+20",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "body.R",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+qXqYf13.5a-f0Z-Zf20',float('-13.500000'),float('-13.500000'),float('0.000000'),float('13.500000'),float('13.500000'),float('20.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                674.6467283271611,
                3050.889112470608
            ],
            "name": "c2",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 0
        },
        {
            "datums": [
                {
                    "expr": "body.zmax",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "self.zmin+10",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "0.0",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "self.R-1",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "20/2",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+qXqYf10a-f0Z-Zf10nam__f1-r+qXqYf9a-f0Z-Zf10',float('-10.000000'),float('-10.000000'),float('0.000000'),float('10.000000'),float('10.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                1079.4782376320816,
                1479.9563699047853
            ],
            "name": "tail",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 10
        },
        {
            "datums": [
                {
                    "expr": "body.x-body.R+self.width/2-2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "0",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "body.zmax+self.depth/2",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "10",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "12",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "8.7",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f-15.5X-Xf-5.5a-f-6Y-Yf6a-f0Z-Zf8.7',float('-15.500000'),float('-6.000000'),float('0.000000'),float('-5.500000'),float('6.000000'),float('8.700000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                693.2490920662638,
                1443.918816000642
            ],
            "name": "index",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 15
        },
        {
            "datums": [
                {
                    "expr": "0.0",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "10",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "30",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "0.0",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "12.75/2",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "17.75/2",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+q-Xf30qYf8.875a-f0Z-Zf10nam__f1-r+q-Xf30qYf6.375a-f0Z-Zf10',float('21.125000'),float('-8.875000'),float('0.000000'),float('38.875000'),float('8.875000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                484.7600731997691,
                4101.013975744441
            ],
            "name": "light",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 17
        },
        {
            "datums": [
                {
                    "expr": "self.zmax-2",
                    "name": "zmin",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "light.zmax",
                    "name": "zmax",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "light.x",
                    "name": "x",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "light.y",
                    "name": "y",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "light.R",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "self.r+2",
                    "name": "R",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('aam__f1-r+q-Xf30qYf10.875a-f8Z-Zf10nam__f1-r+q-Xf30qYf8.875a-f8Z-Zf10',float('19.125000'),float('-10.875000'),float('8.000000'),float('40.875000'),float('10.875000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                34.587214032021265,
                4260.515910308074
            ],
            "name": "tab",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Ring (Z)')",
                "",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('x', float)",
                "input('y', float)",
                "input('r', float)",
                "input('R', float)",
                "",
                "output('shape', fab.shapes.cylinder(x,y, zmin, zmax, R) & ~fab.shapes.cylinder(x, y, zmin, zmax,  r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmax), (x, y, zmax + r)])",
                "sb.ui.wireframe([(x, y,zmin), (x, y, zmin + R)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * R + x, ",
                "     math.sin(i/36. * 2*math.pi) * R + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x, y, zmin + R, drag=(None, None, R))",
                "sb.ui.point(x, y, zmax + r, drag=(None, None, r))",
                ""
            ],
            "uid": 18
        },
        {
            "datums": [
                {
                    "expr": "light.x+light.r",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "light.y+4",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "light.zmin",
                    "name": "zmin",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "light.zmax",
                    "name": "zmax",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "5",
                    "name": "r",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1-r+q-Xf36.375q-Yf4f5a-f0Z-Zf10',float('31.375000'),float('-1.000000'),float('0.000000'),float('41.375000'),float('9.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 5
                }
            ],
            "inspector": [
                37.73150621675052,
                4683.947257851609
            ],
            "name": "c3",
            "script": [
                "import fab",
                "import math",
                "",
                "title('Cylinder (Z)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('zmin', float)",
                "input('zmax', float)",
                "input('r', float)",
                "",
                "output('shape', fab.shapes.cylinder(x, y, zmin, zmax, r))",
                "",
                "# UI",
                "sb.ui.wireframe([(x, y, zmin), (x, y, zmax)])",
                "sb.ui.wireframe([(x, y, zmin), (x+r, y, zmin)])",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmin)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.wireframe([",
                "    (math.cos(i/36. * 2*math.pi) * r + x,",
                "     math.sin(i/36. * 2*math.pi) * r + y, zmax)",
                "    for i in range(36)], close=True)",
                "",
                "sb.ui.point(x, y, zmin)",
                "sb.ui.point(x, y, zmax)",
                "sb.ui.point(x + r, y, zmin, drag=(r, None, None))",
                ""
            ],
            "uid": 19
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__18.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__19.__5]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aaam__f1-r+q-Xf30qYf10.875a-f8Z-Zf10nam__f1-r+q-Xf30qYf8.875a-f8Z-Zf10am__f1-r+q-Xf36.375q-Yf4f5a-f0Z-Zf10',float('31.375000'),float('-1.000000'),float('8.000000'),float('40.875000'),float('9.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                482.1248016584783,
                4556.07937567262
            ],
            "name": "i2",
            "script": [
                "import fab.types",
                "",
                "title('Intersection')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & b)",
                ""
            ],
            "uid": 20
        },
        {
            "datums": [
                {
                    "expr": "\u0011[__20.__2,__17.__6]",
                    "name": "a",
                    "type": "_fabtypes.Shape",
                    "uid": 0
                },
                {
                    "expr": "\u0011[__22.__6]",
                    "name": "b",
                    "type": "_fabtypes.Shape",
                    "uid": 1
                },
                {
                    "expr": "\u0012fab.types.Shape('aiaaam__f1-r+q-Xf30qYf10.875a-f8Z-Zf10nam__f1-r+q-Xf30qYf8.875a-f8Z-Zf10am__f1-r+q-Xf36.375q-Yf4f5a-f0Z-Zf10aam__f1-r+q-Xf30qYf8.875a-f0Z-Zf10nam__f1-r+q-Xf30qYf6.375a-f0Z-Zf10am__f1aa-f30X-Xf40.875a-f-10.875Y-Yf10.875a-f-5Z-Zf25',float('30.000000'),float('-8.875000'),float('0.000000'),float('40.875000'),float('9.000000'),float('10.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 2
                }
            ],
            "inspector": [
                1051.1511448052308,
                4755.956509704798
            ],
            "name": "i3",
            "script": [
                "import fab.types",
                "",
                "title('Intersection')",
                "input('a', fab.types.Shape)",
                "input('b', fab.types.Shape)",
                "",
                "output('shape', a & b)",
                ""
            ],
            "uid": 21
        },
        {
            "datums": [
                {
                    "expr": "light.x+self.width/2",
                    "name": "x",
                    "type": "float",
                    "uid": 0
                },
                {
                    "expr": "light.y",
                    "name": "y",
                    "type": "float",
                    "uid": 1
                },
                {
                    "expr": "light.zmax",
                    "name": "z",
                    "type": "float",
                    "uid": 2
                },
                {
                    "expr": "tab.R",
                    "name": "width",
                    "type": "float",
                    "uid": 3
                },
                {
                    "expr": "tab.R*2",
                    "name": "height",
                    "type": "float",
                    "uid": 4
                },
                {
                    "expr": "30",
                    "name": "depth",
                    "type": "float",
                    "uid": 5
                },
                {
                    "expr": "\u0012fab.types.Shape('am__f1aa-f30X-Xf40.875a-f-10.875Y-Yf10.875a-f-5Z-Zf25',float('30.000000'),float('-10.875000'),float('-5.000000'),float('40.875000'),float('10.875000'),float('25.000000'))",
                    "name": "shape",
                    "type": "_fabtypes.Shape",
                    "uid": 6
                }
            ],
            "inspector": [
                568.8274274881175,
                4943.818102500413
            ],
            "name": "c4",
            "script": [
                "# Neil Gershenfeld 1/24/15",
                "# Matt Keeter 5/22/15",
                "",
                "import fab",
                "",
                "title('Cube (center)')",
                "",
                "input('x', float)",
                "input('y', float)",
                "input('z', float)",
                "input('width', float)",
                "input('height', float)",
                "input('depth', float)",
                "",
                "xmin, xmax = x - width/2, x + width/2",
                "ymin, ymax = y - height/2, y + height/2",
                "zmin, zmax = z - depth/2, z + depth/2",
                "",
                "output('shape', fab.shapes.cube(xmin, xmax, ymin, ymax, zmin, zmax))",
                "",
                "# UI",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmax, ymin, zmin),",
                "                  (xmax, ymax, zmin), (xmin, ymax, zmin)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmax), (xmax, ymin, zmax),",
                "                  (xmax, ymax, zmax), (xmin, ymax, zmax)], close=True)",
                "sb.ui.wireframe([(xmin, ymin, zmin), (xmin, ymax, zmin),",
                "                  (xmin, ymax, zmax), (xmin, ymin, zmax)], close=True)",
                "sb.ui.wireframe([(xmax, ymin, zmin), (xmax, ymax, zmin),",
                "                  (xmax, ymax, zmax), (xmax, ymin, zmax)], close=True)",
                "",
                "def drag_hwd(this, dx,dy,dz):",
                "   this.width += 2*dx",
                "   this.height += 2*dy",
                "   this.depth += 2*dz",
                "",
                "sb.ui.point(x, y, z)",
                "sb.ui.point(x + width/2.0, y + height/2.0, z + depth/2.0,",
                "             drag=drag_hwd)",
                "",
                ""
            ],
            "uid": 22
        }
    ],
    "protocol": 6,
    "type": "sb"
}
